{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\min2\\\\src\\\\Components\\\\Datebox.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport DateItem from \"./DataItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortOptionList = [{\n  value: \"latest\",\n  name: \"최신순\"\n}, {\n  value: \"oldest\",\n  name: \"오래된 순\"\n}];\n\nconst ControlMenu = _ref => {\n  let {\n    value,\n    onChange,\n    optionList\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    class: \"border-none rounded bg-transparent\",\n    value: value,\n    onChange: e => onChange(e.target.value),\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ControlMenu;\n\nconst Datebox = _ref2 => {\n  _s();\n\n  let {\n    tagList\n  } = _ref2;\n  const [sortType, setSortType] = useState(\"latest\");\n\n  const getProcessedDateBox = () => {\n    const compare = (a, b) => {\n      if (sortType === \"latest\") {\n        return parseInt(b.date) - parseInt(a.date);\n      } else {\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n\n    const copyList = JSON.parse(JSON.stringify(tagList));\n    const sortedList = copyList.sort(compare);\n    return sortedList;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"flex justify-end\",\n      children: /*#__PURE__*/_jsxDEV(ControlMenu, {\n        value: sortType,\n        onChange: setSortType,\n        optionList: sortOptionList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"overflow-x-scroll whitespace-nowrap\",\n      children: getProcessedDateBox().map(it => /*#__PURE__*/_jsxDEV(DateItem, { ...it\n      }, it.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Datebox, \"PuwKp9zHOe0WIMKG18LP+mqXeSM=\");\n\n_c2 = Datebox;\nDatebox.defaultProps = {\n  tagList: []\n};\nexport default Datebox;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"Datebox\");","map":{"version":3,"names":["useState","DateItem","sortOptionList","value","name","ControlMenu","onChange","optionList","e","target","map","it","idx","Datebox","tagList","sortType","setSortType","getProcessedDateBox","compare","a","b","parseInt","date","copyList","JSON","parse","stringify","sortedList","sort","id","defaultProps"],"sources":["C:/Users/User/min2/src/Components/Datebox.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport DateItem from \"./DataItem\";\r\n\r\nconst sortOptionList = [\r\n  { value: \"latest\", name: \"최신순\" },\r\n  { value: \"oldest\", name: \"오래된 순\" },\r\n];\r\n\r\nconst ControlMenu = ({ value, onChange, optionList }) => {\r\n  return (\r\n    <select\r\n      class=\"border-none rounded bg-transparent\"\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n    >\r\n      {optionList.map((it, idx) => (\r\n        <option key={idx} value={it.value}>\r\n          {it.name}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n};\r\n\r\nconst Datebox = ({ tagList }) => {\r\n  const [sortType, setSortType] = useState(\"latest\");\r\n  const getProcessedDateBox = () => {\r\n    const compare = (a, b) => {\r\n      if (sortType === \"latest\") {\r\n        return parseInt(b.date) - parseInt(a.date);\r\n      } else {\r\n        return parseInt(a.date) - parseInt(b.date);\r\n      }\r\n    };\r\n    const copyList = JSON.parse(JSON.stringify(tagList));\r\n    const sortedList = copyList.sort(compare);\r\n    return sortedList;\r\n  };\r\n  return (\r\n    <div>\r\n      <div class=\"flex justify-end\">\r\n        <ControlMenu\r\n          value={sortType}\r\n          onChange={setSortType}\r\n          optionList={sortOptionList}\r\n        />\r\n      </div>\r\n      <div class=\"overflow-x-scroll whitespace-nowrap\">\r\n        {getProcessedDateBox().map((it) => (\r\n          <DateItem key={it.id} {...it} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDatebox.defaultProps = {\r\n  tagList: [],\r\n};\r\n\r\nexport default Datebox;\r\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,cAAc,GAAG,CACrB;EAAEC,KAAK,EAAE,QAAT;EAAmBC,IAAI,EAAE;AAAzB,CADqB,EAErB;EAAED,KAAK,EAAE,QAAT;EAAmBC,IAAI,EAAE;AAAzB,CAFqB,CAAvB;;AAKA,MAAMC,WAAW,GAAG,QAAqC;EAAA,IAApC;IAAEF,KAAF;IAASG,QAAT;IAAmBC;EAAnB,CAAoC;EACvD,oBACE;IACE,KAAK,EAAC,oCADR;IAEE,KAAK,EAAEJ,KAFT;IAGE,QAAQ,EAAGK,CAAD,IAAOF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASN,KAAV,CAH3B;IAAA,UAKGI,UAAU,CAACG,GAAX,CAAe,CAACC,EAAD,EAAKC,GAAL,kBACd;MAAkB,KAAK,EAAED,EAAE,CAACR,KAA5B;MAAA,UACGQ,EAAE,CAACP;IADN,GAAaQ,GAAb;MAAA;MAAA;MAAA;IAAA,QADD;EALH;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CAdD;;KAAMP,W;;AAgBN,MAAMQ,OAAO,GAAG,SAAiB;EAAA;;EAAA,IAAhB;IAAEC;EAAF,CAAgB;EAC/B,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,QAAD,CAAxC;;EACA,MAAMiB,mBAAmB,GAAG,MAAM;IAChC,MAAMC,OAAO,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;MACxB,IAAIL,QAAQ,KAAK,QAAjB,EAA2B;QACzB,OAAOM,QAAQ,CAACD,CAAC,CAACE,IAAH,CAAR,GAAmBD,QAAQ,CAACF,CAAC,CAACG,IAAH,CAAlC;MACD,CAFD,MAEO;QACL,OAAOD,QAAQ,CAACF,CAAC,CAACG,IAAH,CAAR,GAAmBD,QAAQ,CAACD,CAAC,CAACE,IAAH,CAAlC;MACD;IACF,CAND;;IAOA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeZ,OAAf,CAAX,CAAjB;IACA,MAAMa,UAAU,GAAGJ,QAAQ,CAACK,IAAT,CAAcV,OAAd,CAAnB;IACA,OAAOS,UAAP;EACD,CAXD;;EAYA,oBACE;IAAA,wBACE;MAAK,KAAK,EAAC,kBAAX;MAAA,uBACE,QAAC,WAAD;QACE,KAAK,EAAEZ,QADT;QAEE,QAAQ,EAAEC,WAFZ;QAGE,UAAU,EAAEd;MAHd;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAQE;MAAK,KAAK,EAAC,qCAAX;MAAA,UACGe,mBAAmB,GAAGP,GAAtB,CAA2BC,EAAD,iBACzB,QAAC,QAAD,OAA0BA;MAA1B,GAAeA,EAAE,CAACkB,EAAlB;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD,CA9BD;;GAAMhB,O;;MAAAA,O;AAgCNA,OAAO,CAACiB,YAAR,GAAuB;EACrBhB,OAAO,EAAE;AADY,CAAvB;AAIA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}